# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network "private_network", ip: "192.168.200.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"  
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get install -y sysstat htop apg iotop openssl curl vim wget unzip bc zip mc
    apt-get install -y git subversion redis-tools 
    apt-get install -y apache2 
    apt-get install -y mysql-server redis-server
    apt-get install -y imagemagick wkhtmltopdf sendmail libssl-dev build-essential ffmpeg mailutils apache2 libapache2-mod-xsendfile
    apt-get install -y php libapache2-mod-php7.2 php7.2-gd php7.2-dom php7.2-curl php7.2-mysql php7.2-json php-tidy php-mbstring php-imagick php-memcached php-zip php7.2-soap php-xdebug    

    addgroup webusers
    addgroup webdata
    adduser --disabled-password --GECOS '' deploy
    adduser deploy webdata
    adduser www-data webusers

    chown -R vagrant:webusers /var/www

    sed -i 's/post_max_size = .*/post_max_size = 256M/g' /etc/php/7.*/apache2/php.ini
    sed -i 's/upload_max_filesize = .*/upload_max_filesize = 256M/g' /etc/php/7.*/apache2/php.ini
    sed --regexp-extended -i 's/^.?date.timezone =.*/date.timezone = "UTC"/g' /etc/php/7.*/apache2/php.ini
    sed --regexp-extended -i 's/^.?date.timezone =.*/date.timezone = "UTC"/g' /etc/php/7.*/cli/php.ini 

    echo 'xdebug.remote_port=9000' >> /etc/php/7.*/apache2/php.ini
    echo 'xdebug.remote_enable=true' >> /etc/php/7.*/apache2/php.ini
    echo 'xdebug.remote_connect_back=true' >> /etc/php/7.*/apache2/php.ini
    echo 'xdebug.remote_autostart=on' >> /etc/php/7.*/apache2/php.ini
    echo 'xdebug.remote_host=10.0.2.1' >> /etc/php/7.*/apache2/php.ini
    echo 'xdebug.max_nesting_level=1000' >> /etc/php/7.*/apache2/php.ini
    echo 'xdebug.idekey=PHPSTORM' >> /etc/php/7.*/apache2/php.ini

    mysql -e "create user vagrant@localhost identified by '' "
    mysql -e "grant all on *.* to vagrant@localhost with grant option"

    a2enmod rewrite && a2enmod xsendfile && a2enmod expires  && a2enmod ssl && apachectl restart

    curl -Ss https://getcomposer.org/installer | php > /dev/null
    sudo mv composer.phar /usr/bin/composer

    sudo apachectl restart    

  SHELL

  config.vm.synced_folder "./data", "/var/www/html", group: 1002, mount_options: ["dmode=775,fmode=775"]
end
